<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   creationComplete="onCreationComplete(event)" xmlns:local="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.vispar.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var defaultRoom:String = "default";
			private var defaultUser:String = "default";
			//540=480+30*2
			private var edgeX_:int = 0; //leave the top area for display label and others
			private var edgeY_:int = 30;//leave the top area for display label and others
			
			//vidContainer class
			private var vidInstance_:VideoContainer = null;
			
			[Bindable]
			private var videoSet:ArrayCollection = new ArrayCollection(
				[   
					{value:"Please Pick A Movie", code:"Please Pick A Movie"}	
				]
			);
			
			public function onCreationComplete(event:FlexEvent) : void {
				try {
					this.container.setInfo(edgeX_, edgeY_, debugText, videoSet, onVideoStarted );
					var room:String = getVideoRoom();
					var user:String = getUserName();
					if( getIsArchive() ) {
						this.switchAudioOnly.visible = false;
						this.switchViewOnly.visible = false;
						this.videoList.visible = false;
						this.stopVideo.visible = false;
						vidInstance_ = new VideoPlayer(container, container, room, user);
					} else {				
						vidInstance_ = new VideoConf(container, container, room, user);
					}
					vidInstance_.connectServer();	
				} catch (error:Error) {
					Alert.show("----exception, e=" + error.toString());
				}
			}
			
			private function getVideoRoom():String {
				var room:String = defaultRoom;
				try
				{
					if (ExternalInterface.available) 
					{ 
						// Perform ExternalInterface method calls here. 
						room = ExternalInterface.call("getRoom");
						if(room == null) {
							room = defaultRoom;
						}
						//Alert.show("room="+room);
					}
				}
				catch (error:Error) 
				{
					Alert.show("error="+error.toString());
				}
				return room;
			}
			
			private function getIsArchive():Boolean {
				var isArchive:Boolean = false;
				try
				{
					if (ExternalInterface.available) 
					{ 
						// Perform ExternalInterface method calls here. 
						isArchive = ExternalInterface.call("isArchive");
						//Alert.show("isArchive="+isArchive);
					}
				}
				catch (error:Error) 
				{
					Alert.show("error="+error.toString());
				}
				return isArchive;
			}
			
			private function getUserName():String {
				var userName:String = defaultUser;
				try
				{
					if (ExternalInterface.available) 
					{ 
						// Perform ExternalInterface method calls here. 
						userName = ExternalInterface.call("getUser");
						if(userName == null) {
							userName = defaultUser;
						}
						//Alert.show("userName="+userName);
					}
				}
				catch (error:Error) 
				{
					Alert.show("error="+error.toString());
				}
				return userName;
			}
			
			protected function stopVideo_clickHandler(event:MouseEvent):void
			{
				vidInstance_.stopVideo();	
				videoList.selectedIndex = 0;
			}
			
			private function videoList_changeHandler(event:IndexChangeEvent):void	
			{
				if( videoList.selectedIndex != 0) {
					//status.text = "Video selected="+videoList.selectedItem.value;
					vidInstance_.selectVideo(videoList.selectedItem.value);	
					videoList.selectedIndex = 0;
				}
			}
			
			protected function switchViewOnly_clickHandler(event:MouseEvent):void {
				var isViewOnly:Boolean = vidInstance_.isViewOnly();
				vidInstance_.switchToViewOnly( !isViewOnly );
				this.onVideoStarted( !isViewOnly );
			}			
			public function onVideoStarted(isViewOnly:Boolean):void{
				//check whether it's the talker mode or other mode.
				if( isViewOnly ) {
					this.switchAudioOnly.enabled = false;
					this.switchViewOnly.label = "Go To Talker Mode";
				} else {
					this.switchAudioOnly.enabled = true;
					this.switchViewOnly.label = "Go To Viewer Mode";					
				}
			}
			protected function switchAudioOnly_clickHandler(event:MouseEvent):void {
				var isAudioOnly:Boolean = vidInstance_.isAudioOnly();
				vidInstance_.switchToAudioOnly( !isAudioOnly );
				this.onAudioOnly( !isAudioOnly );
			}
			public function onAudioOnly(onAudioOnly:Boolean):void{
				//check whether it's the talker mode or other mode.
				if( onAudioOnly ) {
					this.switchAudioOnly.label = "Show Video";
				} else {
					this.switchAudioOnly.label = "Audio Only";					
				}
			}
		]]>
	</fx:Script>
	<s:Group>
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Label id="lbl" width="100%" height="100%" fontSize="20" horizontalCenter="0"
				 paddingLeft="10" paddingRight="5" paddingTop="5" text="Welcome to Howard's Vispar Session&#xd;"
				 verticalCenter="0"/>
	</s:Group>
	<local:UIContainer id="container" x="0" y="0" width="640" height="540"/>
	<s:Button id="switchViewOnly" x="356" y="1" width="177" height="25" label="Go To Viewer Mode"
			  click="switchViewOnly_clickHandler(event)" color="#610877" fontSize="14"/>
	<s:Button id="switchAudioOnly" x="537" y="1" width="99" height="25" label="Audio Only"
			  click="switchAudioOnly_clickHandler(event)" color="#085C77" fontSize="14"/>
	<s:TextArea id="debugText" x="650" y="64" width="305" height="476" text=""/>
	<s:Label id="debug" x="648" y="34" width="180" height="26" fontSize="20" paddingLeft="5"
			 paddingTop="5" text="Debug Messages"/>
	<s:DropDownList id="videoList" x="648" y="1" width="200" height="25"
					change="videoList_changeHandler(event)" color="#000000"
					dataProvider="{videoSet}" labelField="value" selectedIndex="0"/>
	<s:Button id="stopVideo" x="855" y="1" width="100" height="25" label="Stop"
			  click="stopVideo_clickHandler(event)" color="#4800FF" fontSize="14"/>
</s:Application>
